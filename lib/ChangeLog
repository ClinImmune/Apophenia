		March 2006
--apop_inventory is now a subset of apop_estimation_params. Implications:
	--added apop_estimation_params_alloc() to ensure that inventory is set right.
	--the model.estimate(data, inv, params) method is now model.estimate(data, params)
	  model.estimate(data, NULL) still does what the user expects it to.
  This makes structural sense, but will lightly break any existing code.
  fix: change 
   apop_inventory *inv = apop_inventory_set(1);
   model.estimate(data, inv, NULL);

   to
   apop_estimation_params *ep = apop_estimation_params_alloc();
   model.estimate(data, ep);

   and in any apop_estimates, change any use of est->uses to
   est.estimation_params.uses.

--Next apop_estimate reform: y_values and residuals combined into one
apop_data table with actual, predicted, residual columns.
	--obviated the need for a 'dependent' element in apop_names; removed that.
	If you need the name, it's now your_est->dependent->names->colnames[0].

--your_estimate->covariance is now an apop_data set instead of a gsl_matrix.

--the data element of the apop_matrix structure is now named matrix. So
instead of data_set->data, use data_set->matrix, and instead of
estimate->data->data->data, you can use estimate->data->matrix->data.

--The command-line utility has been revisited, and can do a few more
things, like OLS.


		February 2006
sort-of-adaptive MLE: use apop_estimate_restart to execute a new MLE
search beginning where the last one ended, perhaps using a new method or
rescaled parameters.
	--This needed convenience functions to check for divergence, thus
		added apop_vector_finite, apop_vector_bounded, apop_vector_isnan.
--apop_db_to_crosstab now returns an apop_data set instead of a gsl_matrix.
Also, it finally works with column headers that aren't numeric.
--stats like apop_mean are now apop_vector_mean, following the proper
	pkg-noun-verb naming scheme. 
--Textbook is much improved.
--apop_vector_to_pdf convenience fn.

--Some of the fns that used to be of the form
	apop_get_something(input, &output);
are now of the more natural
	out	= apop_get_something(input);
This includes apop_array_to_vector and apop_array_to_matrix

--bootstrapping works, and works with with apop_models.
--apop_poisson model

0.15	January 2006
Added an apop_opts structure for options. Alowed the following changes:
	--apop_verbose  is now apop_opts.verbose. Try this on your existing code:
		perl -pi.bak -e 's/apop_verbose/apop_opts.verbose/g' *.c *.h
	--the output functions now output into three formats: on screen, to file, to db;
		see chapter five of the manual.
		
--F tests 
--R squared.

0.14	December 2005

The apop_data structure, which is just a shell for a gsl_matrix and an
apop_name. Was just sick of sending names following around my tables. 
Lets us keep both numerical and categorical data in one place; kind of
like R's data frame.

--Added linear model objects: OLS, GLS. This means that what had been
the apop_OLS function is now the apop_estimate_OLS function, and where it
used to take in a gsl_matrix and an apop_name, now it takes an apop_data
structure and a NULL. So you'll have to modify your code accordingly.

--A function to generate dummy variables, useful in conjunction with
--Functions to stack matrices and apop_data sets. Even a
apop_partitioned_OLS function, that will only practically work for small data sets.

--pow(.,.) in the database. I can't believe I dealt with SQL this long w/o it.

0.13	December 2005

--The apop_model object. This was a big deal that deserves more than
just one line; see the manuals.

0.12 	mid November 2005

--Bar charts (assuming you've got Gnuplot > 4.1)
--percentiles (in case you haven't got it)
--redid MLE system so you can pick among the many options now available.  As a part of this:
	--better handling of constraints.
	--numerical gradients.
	--numerical Hessians.

0.12 	early November 2005, post-hiatus

You now have three maximum likelihood estimators to choose from: the
GSL's no-gradient, the GSL's with-gradient, and Mr. WN's autocalculated
gradient. 

If you haven't seen it before, the apop_distribution structure is
increasingly well-supported. It allows the user to specify the features
of the Max. Likeihood model in a consistent manner which facilitates
things like comparing two models.

I'd still suggest taking the Waring and Yule distributions with care;
everything else seems to check out.


0.12 	September 2005
--The distributions are now objects, which just provides a neat way
of grouping together the half-dozen functions which are associated with
any one distribution.

0.11	September 2005
--command-line server is much improved. I actually do work with it.
--Documentation is now via doxygen.
--asst bug fixes.
--Have started to take plotting (via gnuplot) seriously
--a limited test suite. Try: make test .

0.10	August 2005
--This version includes a server to park itself in memory and receive data
processing requests. The intent is that one can then do analysis from
the command line or a Perl/Python/Whatever script. The client/server
works in the sense of handling a handful of requests without
segfaulting, but remains in proof-of-concept stage. 
--Added apop_merge_db for joining databases, both via C and command line 
--Run t tests from the cmd line or the database.

0.09	July 2005
Flattened the relatively complex vasprintf subsystem from GNU, so if
you've been having trouble compiling on non-GNU systems, try again.
Added two little command-line programs. Also, added more little
functions which aren't very interesting, like t-tests; maybe you'll
stumble upon them.

0.08	May 2005
--OLS/GLS/MLE now properly support the apop_estimate structure 
--Column names

0.07	April 2005
--uses the apop_estimate structure to return heaps of data from regressions & MLEs
--uses the apop_model structure

0.06
--var(x), skew(x), kurtosis(x) added to SQL understood by Apophenia.

0.05
--added a little crosstab utility
--queries now accept printf-type arguments. 
	==>GNU vasprintf was added.
		==>updated to work with autoconf 1.7
